# the cross target's system name (defaults to the host's system name)
if(NOT DEFINED CROSS_SYSTEM_NAME)
    set(CROSS_SYSTEM_NAME ${CMAKE_HOST_SYSTEM_NAME})
endif()

# the cross target's system processor (defaults to the host's system processor)
if (NOT DEFINED CROSS_SYSTEM_PROCESSOR)
    set(CROSS_SYSTEM_PROCESSOR ${CMAKE_HOST_SYSTEM_PROCESSOR})
endif()

# a path to the cross compiling toolchain tools
if (NOT DEFINED CROSS_TOOLCHAIN_PATH)
    set(CROSS_TOOLCHAIN_PATH "")
else()
    # if the path is not deliberately empty and it's missing a path separator at the end,
    # we append said path separator
    if (NOT ((CROSS_TOOLCHAIN_PATH STREQUAL "") OR (CROSS_TOOLCHAIN_PATH MATCHES "^.*[\\\/]$")))
        set(CROSS_TOOLCHAIN_PATH "${CROSS_TOOLCHAIN_PATH}/")
    endif()
endif()

# a prefix all the cross compiling toolchain tools share
# (this is most likely the cross target's system triplet)
if (NOT DEFINED CROSS_TOOLCHAIN_PREFIX)
    set(CROSS_TOOLCHAIN_PREFIX "")
else()
    if (NOT ((CROSS_TOOLCHAIN_PREFIX STREQUAL "") OR (CROSS_TOOLCHAIN_PREFIX MATCHES "^.*\-$")))
        set(CROSS_TOOLCHAIN_PREFIX "${CROSS_TOOLCHAIN_PREFIX}-")
    endif()
endif()

message(STATUS "CROSS_SYSTEM_NAME:      ${CROSS_SYSTEM_NAME}")
message(STATUS "CROSS_SYSTEM_PROCESSOR: ${CROSS_SYSTEM_PROCESSOR}")
message(STATUS "CROSS_TOOLCHAIN_PATH:   ${CROSS_TOOLCHAIN_PATH}")
message(STATUS "CROSS_TOOLCHAIN_PREFIX: ${CROSS_TOOLCHAIN_PREFIX}")

# taken and modified from https://kubasejdak.com/how-to-cross-compile-for-embedded-with-cmake-like-a-champ
# credits go to Kuba Sejdak

set(CMAKE_SYSTEM_NAME      "${CROSS_SYSTEM_NAME}")
set(CMAKE_SYSTEM_PROCESSOR "${CROSS_SYSTEM_PROCESSOR}")

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(CMAKE_AR           "${CROSS_TOOLCHAIN_PATH}${CROSS_TOOLCHAIN_PREFIX}ar${CMAKE_EXECUTABLE_SUFFIX}")
set(CMAKE_ASM_COMPILER "${CROSS_TOOLCHAIN_PATH}${CROSS_TOOLCHAIN_PREFIX}gcc${CMAKE_EXECUTABLE_SUFFIX}")
set(CMAKE_C_COMPILER   "${CROSS_TOOLCHAIN_PATH}${CROSS_TOOLCHAIN_PREFIX}gcc${CMAKE_EXECUTABLE_SUFFIX}")
set(CMAKE_CXX_COMPILER "${CROSS_TOOLCHAIN_PATH}${CROSS_TOOLCHAIN_PREFIX}g++${CMAKE_EXECUTABLE_SUFFIX}")
set(CMAKE_LINKER       "${CROSS_TOOLCHAIN_PATH}${CROSS_TOOLCHAIN_PREFIX}ld${CMAKE_EXECUTABLE_SUFFIX}")
set(CMAKE_OBJCOPY      "${CROSS_TOOLCHAIN_PATH}${CROSS_TOOLCHAIN_PREFIX}objcopy${CMAKE_EXECUTABLE_SUFFIX}" CACHE INTERNAL "")
set(CMAKE_RANLIB       "${CROSS_TOOLCHAIN_PATH}${CROSS_TOOLCHAIN_PREFIX}ranlib${CMAKE_EXECUTABLE_SUFFIX}" CACHE INTERNAL "")
set(CMAKE_SIZE         "${CROSS_TOOLCHAIN_PATH}${CROSS_TOOLCHAIN_PREFIX}size${CMAKE_EXECUTABLE_SUFFIX}" CACHE INTERNAL "")
set(CMAKE_STRIP        "${CROSS_TOOLCHAIN_PATH}${CROSS_TOOLCHAIN_PREFIX}strip${CMAKE_EXECUTABLE_SUFFIX}" CACHE INTERNAL "")

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
